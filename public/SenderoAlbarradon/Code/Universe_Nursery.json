{
  "id": 47,
  "name": "Universe Nursery",
  "fragment": "// http://casual-effects.blogspot.com/2013/08/starfield-shader.html\n#extension GL_OES_standard_derivatives : enable\n\n#define iterations 17\n#define volsteps 8\n#define sparsity 0.5\n#define stepsize 0.2\n #define frequencyVariation   1.3\n\nprecision highp float;\nprecision highp int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nuniform vec3 color;\nuniform float time;\nuniform float twinkleSpeed;\nuniform float speed;\n \nuniform float brightness;\nuniform float distfading;\n \n\n#define PI 3.141592653589793238462643383279\n\nvoid main( void ) {\n\n    vec2 uv = vUv.xy + 0.5;\n    uv.x += time * speed * 0.1;\n \n    vec3 dir = vec3(uv * 2.0, 1.0);\n \n    float s = 0.1, fade = 0.01;\n    vec3 starColor = vec3(0.0);\n     \n    for (int r = 0; r < volsteps; ++r) {\n        vec3 p =  (time * speed * twinkleSpeed) + dir * (s * 0.5);\n        p = abs(vec3(frequencyVariation) - mod(p, vec3(frequencyVariation * 2.0)));\n \n        float prevlen = 0.0, a = 0.0;\n        for (int i = 0; i < iterations; ++i) {\n            p = abs(p);\n            p = p * (1.0 / dot(p, p)) + (-sparsity); // the magic formula            \n            float len = length(p);\n            a += abs(len - prevlen); // absolute sum of average change\n            prevlen = len;\n        }\n         \n        a *= a * a; // add contrast\n         \n        // coloring based on distance        \n        starColor += (vec3(s, s*s, s*s*s) * a * brightness + 1.0) * fade;\n        fade *= distfading; // distance fading\n        s += stepsize;\n    }\n     \n    starColor = min(starColor, vec3(1.2));\n \n    // Detect and suppress flickering single pixels (ignoring the huge gradients that we encounter inside bright areas)\n    float intensity = min(starColor.r + starColor.g + starColor.b, 0.7);\n \n    vec2 sgn = (vec2(vUv.xy)) * 2.0 - 1.0;\n    vec2 gradient = vec2(dFdx(intensity) * sgn.x, dFdy(intensity) * sgn.y);\n    float cutoff = max(max(gradient.x, gradient.y) - 0.1, 0.0);\n    starColor *= max(1.0 - cutoff * 6.0, 0.3);\n \n    // Motion blur; increases temporal coherence of undersampled flickering stars\n    // and provides temporal filtering under true motion.  \n    gl_FragColor = vec4( starColor * color, 1.0 );\n}\n",
  "vertex": "precision highp float;\r\nprecision highp int;\r\n\r\nuniform mat4 modelMatrix;\r\nuniform mat4 modelViewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 viewMatrix;\r\nuniform mat3 normalMatrix;\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 uv;\r\nattribute vec2 uv2;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  vPosition = position;\r\n  vNormal = normal;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}",
  "uniforms": {
    "color": {
      "type": "c",
      "glslType": "vec3",
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "time": {
      "type": "f",
      "glslType": "float",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "speed": {
      "type": "f",
      "glslType": "float",
      "value": "0.2",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "brightness": {
      "type": "f",
      "glslType": "float",
      "value": "0.0018",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "distfading": {
      "type": "f",
      "glslType": "float",
      "value": "0.75",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "twinkleSpeed": {
      "type": "f",
      "glslType": "float",
      "value": "0.04",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    }
  },
  "url": "http://shaderfrog.com/app/view/47",
  "user": {
    "username": "andrewray",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}